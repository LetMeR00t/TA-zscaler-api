{"basic_builder": {"appname": "TA-zscaler-api", "friendly_name": "Zscaler API", "version": "1.0.0", "author": "Alexandre Demeyer", "description": "This TA is used to interact with the Zscaler API (ZPA only for the moment) using Splunk", "theme": "#009AD8", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABG5JREFUWEfdl2tsk1UYx/9v7yu7dXUXKtYxJTqVsEA2VvkiEbMPXIRwMaRIYICJ7ItAwiUKErZPJPoFoolD1ERGcGCQcclQFsJQN8Z0DOK4uCtb27Vb2djWla3ta05L3/Z9+7bvacsH4vm09TzPc37v8/zPc85hWJZl8RwN5n8LNDbl8+c5TSVLKt8JZ2jSw6KyaQg/doyJAug1cny9JAelM1PiAkwI6NjtURxqGqZaaIlRi+NleVS2xChuoMU/PUTn6HTMBVIUDFbPSUXVomzIGGBi2ocZSrpSxgW05bINv/a6osKQxds35iM9CR1FBbKMe2C+ZEXnSCAbDIBY/WF/qR7b5mZQlyaaoShQRcMg6jonqIM3rJ2FVzNVeDzlg3PSiwy1DDqNnNo/3DACaHO9FVf6JqmCMQxwZ2M+DvwxhDMPxjmfGUoGP68woDBLTRUnKlDroBurzlniDhLusK8kCx/Py+TF8PhYjE/7MOVlkaaSg4ieqmTG6q6EYVRyBv+Wz+b8id5uWN1Ye178A3fOz8QnC7Ii1uNK9k37CKqanQkB6TQy3Pown/Nts7vx/jkLpE5JhYxB15bQR/D6UP6xLvgSOGbnZatRt/JFDmb9BSt+t9BpkDhpFAzubw5BcRlKpFwFGUpcXfcSB7PqlwG02p/4/yc6+XShHkrSnAB4WRYH/xz260g4Dpr0KH8r0DL8QDdsbqypi0/MajmDB2GaOXn3MfY2DqGiKBO7iyO1EYQYdHlQfKIvAqpvW0EIaG+jAzV3xQ/JaKIKBgjO77xqx5fv5FBpcNrH4pVvu3m2PKDVdRa02NxUwYjRnmIdKop01PZihrX3xrDrmoObajEbkatVBEq2/OwAbjkCtZcaRBG9T9MrZRtrnvSlN77v4Ux+KMvDYqM2ALTuvAVNVroM3TQbkaNVJMPi97VNeFBSE9LS6eUGlORpAkBE/cfvjEouIhSymMORv0fwyO0FuT9qFQx2LNBxOy3c/r3T/bj3aIr7qXtrAeTM0102MO6B6WSk8oULXlkzC3N0qgiO2vtj2H3NAZEdzdlWLXoB619P88MdbRvB4RZ+E+aJmnjR9CHhzrK7vCip6U2ooYZ/1UdzM/BZqT607clfZWf60eEMpVCYhlytHC3ml7mfG/tdMF+ySZZZyiBVKcM/m0LHDtepybFBjo9oI1hjMl/dPorKZro7dSwgk0GDU0sNPBPefaiyaRjVt8XFHSzXb30ulNcnl5naZQYU5ahBNolwRFzQVpwdQJugJ5HjqGdrgf+yXhjWO6TKITafnSJH64ZQ6SWBiMG+6w6cCHtvGdMVuP6BkUr4UpDCjUEFFDT64qYTzTY3vno3Fx3OJzBfTK5Uh97WY9ObsR8CcT2DXvuuG+TFmsgwzdTg1DK+gMXixAVEAtT3TGB7g93/JiJvPxcFIHlSL52dSvUdcQMJo/5ld4PcEsUyt6EwHZ+b9KK7KRpd0kDhgcltkLwwtJTP5mdSMqq8J2H0TDOUBAfn+twB/QcfZPCk0WCTIgAAAABJRU5ErkJggg==", "visible": true, "tab_version": "4.1.0", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "zscaler:api:zpa", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "zscaler_zpa_configurations", "title": "Zscaler ZPA Configurations", "description": "This input is used to recover periodically some data regarding the current Zscaler ZPA configuration in a dedicated sourcetype", "type": "customized", "parameters": [{"name": "client_account", "label": "Client Account", "help_string": "Enter your Zscaler Client account (configured under Account)", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"required": true, "name": "items", "label": "Items", "default_value": [], "help_string": "Select which configuration you want to recover", "placeholder": "", "possible_values": [{"value": "app_segments", "label": "App Segments"}, {"value": "certificates", "label": "Browser Access"}, {"value": "cloud_connector_groups", "label": "Cloud Connector Groups"}, {"label": "Connector Groups", "value": "connector_groups"}, {"label": "Connectors", "value": "connectors"}, {"label": "IDP", "value": "idp"}, {"label": "Machine Groups", "value": "machine_groups"}, {"label": "Policies", "value": "policies"}, {"label": "Posture Profiles", "value": "posture_profiles"}, {"label": "Provisioning", "value": "provisioning"}, {"label": "SAML Attributes", "value": "saml_attributes"}, {"label": "SCIM Attributes", "value": "scim_attributes"}, {"label": "SCIM Groups", "value": "scim_groups"}, {"label": "Segment Groups", "value": "segment_groups"}, {"label": "Server Groups", "value": "server_groups"}, {"label": "Servers", "value": "servers"}, {"label": "Service Edges", "value": "service_edges"}, {"label": "Trusted Networks", "value": "trusted_networks"}], "type": "multi_dropdownlist", "format_type": "multi_dropdownlist", "value": ["service_edges"]}], "data_inputs_options": [{"type": "customized_var", "name": "client_account", "title": "Client Account", "description": "Enter your Zscaler Client account (configured under Account)", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "items", "title": "Items", "description": "Select which configuration you want to recover", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "app_segments", "label": "App Segments"}, {"value": "certificates", "label": "Browser Access"}, {"value": "cloud_connector_groups", "label": "Cloud Connector Groups"}, {"label": "Connector Groups", "value": "connector_groups"}, {"label": "Connectors", "value": "connectors"}, {"label": "IDP", "value": "idp"}, {"label": "Machine Groups", "value": "machine_groups"}, {"label": "Policies", "value": "policies"}, {"label": "Posture Profiles", "value": "posture_profiles"}, {"label": "Provisioning", "value": "provisioning"}, {"label": "SAML Attributes", "value": "saml_attributes"}, {"label": "SCIM Attributes", "value": "scim_attributes"}, {"label": "SCIM Groups", "value": "scim_groups"}, {"label": "Segment Groups", "value": "segment_groups"}, {"label": "Server Groups", "value": "server_groups"}, {"label": "Servers", "value": "servers"}, {"label": "Service Edges", "value": "service_edges"}, {"label": "Trusted Networks", "value": "trusted_networks"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\n\n# Import custom librairies\nfrom pyzscaler import ZPA\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # client_account = definition.parameters.get('client_account', None)\n    if(definition.parameters.get('client_account', None) is None):\n        helper.log_error(\"[ZPA] #1 - No client account was provided\")\n        sys.exit(1)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_client_account = helper.get_arg('client_account')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_client_account = helper.get_arg('client_account', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_customer_id = helper.get_global_setting(\"customer_id\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n    # Get information about the Splunk input\n    input_type = helper.get_input_type()\n    opt_items = helper.get_arg('items')\n    \n    # Get credentials for Zscaler\n    client = helper.get_user_credential_by_id(\"account0\")\n    customer_id = helper.get_global_setting(\"customer_id\")\n    \n    ITEMS_MAP = {\n        \"app_segments\": \"list_segments\",\n        \"certificates\": \"list_browser_access\",\n        \"cloud_connector_groups\": \"list_groups\",\n        \"connector_groups\": \"list_groups\",\n        \"connectors\": \"list_connectors\",\n        \"idp\": \"list_idps\",\n        \"machine_groups\": \"list_groups\",\n        \"posture_profiles\": \"list_profiles\",\n        \"saml_attributes\": \"list_attributes\",\n        \"scim_groups\": \"list_groups\",\n        \"segment_groups\": \"list_groups\",\n        \"server_groups\": \"list_groups\",\n        \"servers\": \"list_servers\",\n        \"trusted_networks\": \"list_networks\"\n    }\n    \n    zpa = ZPA(client_id=client[\"username\"], client_secret=client[\"password\"], customer_id=customer_id)\n    \n    # Get items (simple methods)\n    for item in opt_items:\n        if item in ITEMS_MAP:\n            function = ITEMS_MAP[item]\n            for data in getattr(getattr(zpa,item),function)():\n                event = helper.new_event(source=input_type+\":\"+item, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(data))\n                ew.write_event(event)\n    \n    \n    # Get policies if specified (more complex)\n    if \"policies\" in opt_items:\n        for policy_name in [\"access\",\"timeout\",\"client_forwarding\",\"siem\"]:\n            policy = zpa.policies.get_policy(policy_name)\n            event = helper.new_event(source=input_type+\":policies\", index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(policy))\n            ew.write_event(event) \n            if policy_name != \"siem\":\n                for rule in zpa.policies.list_rules(policy_name):\n                    event = helper.new_event(source=input_type+\":policies:rules\"+item, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(rule))\n                    ew.write_event(event) \n                \n    \n    # Get provisioning if specified (more complex)\n    if \"provisioning\" in opt_items:\n        for key in [\"connector\",\"service_edge\"]:\n            provisioning = zpa.provisioning.list_provisioning_keys(key)\n            if provisioning != []:\n                event = helper.new_event(source=input_type+\":provisioning\", index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(provisioning))\n                ew.write_event(event) \n                \n                \n    # Get SCIM attributes if specified (more complex)\n    if \"scim_attributes\" in opt_items:\n        for idp in zpa.idp.list_idps():\n            list_attributes = zpa.scim_attributes.list_attributes_by_idp(idp[\"id\"])\n            if list_attributes != []:\n                event = helper.new_event(source=input_type+\":scim_attributes\", index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(list_attributes))\n                ew.write_event(event) \n\n\n    # Get service edges if specified (more complex)\n    if \"service_edges\" in opt_items:\n        for service_edges in zpa.service_edges.list_service_edges():\n            event = helper.new_event(source=input_type+\":\"+item, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(service_edges))\n            ew.write_event(event)\n        for service_edge_groups in zpa.service_edges.list_service_edge_groups():\n            event = helper.new_event(source=input_type+\":\"+item, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(service_edge_groups))\n            ew.write_event(event)\n    ", "customized_options": [{"name": "client_account", "value": "account0"}, {"name": "items", "value": ["service_edges"]}], "uuid": "7a999f4f8569482bbc7d7d84c016dd0b", "sample_count": "0"}]}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": [], "customized_settings": [{"required": true, "name": "customer_id", "label": "Customer ID", "default_value": "", "placeholder": "", "help_string": "Enter your Zscaler Customer ID", "type": "text", "format_type": "text", "value": ""}]}}, "sourcetype_builder": {"zscaler:api:zpa": {"metadata": {"event_count": 0, "data_input_name": "zscaler_zpa_configurations", "extractions_count": 0, "cims_count": 0}}}, "validation": {}}