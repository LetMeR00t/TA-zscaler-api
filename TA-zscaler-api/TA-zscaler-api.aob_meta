{"alert_action_builder": {"modular_alerts": [{"description": "This alert action is used to realize an action in Zscaler ZPA", "largeIcon": "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", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAFVUlEQVRYR+1XfUzUZRz/HNwdcBxwIHAw3pQJ2guV1iKzhGkwk1qzqFxbLbbmTCtiYqvGP7S2nDpxWdiamZs2E10U0dqaiIZmS5TMXiAFp7wYr3fcwXHcHUff78PdcYf38rujP1rrM/jj9nue7/N5vi+f7/eRTRPwL4LsP0fIbJvG0MQUjFY7QM6OkochLoL/wxEmC971IXuo22jF3jY9TvdMECEbmA+DScQqw7AwToFNeXFYu0gdFLGgCXHG7bmow8eX9Ri3Bk6/9YvV2FOYDJlEbwVFyE7nlzcP4KvOMb+xyEtUoigrGrclKKEgl+UlRSApKlxS/AISMtnsoD+o5DK88+MwDv5m8Gk4LzECW++Nx+pMlaTDvS3ySojDcqrHhP2XR9HSOyH2RRGhCUpgb1CGy7CR8mXbfQmSQ+OL8S2ErBSXt88Moe5PIxdNQGioomrXaMHe6R2zCtKRRD4zRoEYSu5g4UGIz3/j+0Ec7TBKssNkdhck48tOI872mjFsnhL7cuOVqClMEiSDhQeh+itGlJ8alGyDIgUOlzOUJEGoXpGIZ5bEIII/OjA5NY2b4zaqSjvS1HKhUb6KzkVozGLHQ0e7MeK4pWRWjoVL4hXYu1qLpVRZDD78019H0dRtwsX+SbhHn0k9nq3G68s1UCk8w+oitO+SHu/9NBIsD7G+MEOFD1cni5zhvPu8w4Ad53WuEPoymkuXOFCcgsxYhWuJi1ABeeeawRo0oaIsFfYXpYjq4tC81TKE4xR6qWCPNjyRJgqBIQh1jVpRWNct1YZr3aq0KBxcmwI5id8UuaaieZASfIzCIEOORomCdJU4iI+yUfWeuGHCL4Oe4WNjVfkJ2HiXZpZQHVVVJVVXMMimXtW4Pg1qRw6wZr3fpkMFCeO6RdHQquRezTVTTm1u6vdoO5kxcpzZkDlLaGfriGiUUsGV9S2RyaHyZvSbbGjsGkdpTozo9IHQobOg+HiPR6K3PJuBLMolEbKtpwdxjIRQKt68PwGb755xMcNO4QqT2j0de3Zf0Ikm7cS+NckoocoThLhh1l/13zCdGxdrFGh6OsOnjki9VOtfZjz5dZ9r+faHE/Hc0tgZQpXkIW4VUvBJsVZ08vnim64xvNw04DKza1WSEFRBqIbcV+PmPl+HcYl+91S6188WKvnrJBs/9E3AQCLLQsjT4wOpkeACiHYTQP62hRKb886JI+tSsZKqVhCay9YXIect3L8zkc/aDThAqnzDYPNIVF7HJa+NDsdjlB8v3h4rxHNnqw6H/5gdY3jCbHs+S8xOghC3jWWHrwth8wUlLW4vWyg0x4nWfjO2kVx06qUJqnPn3FNeW6ZBJY0u4gLOV8crJwfQ4GcSfIFu9+7KRBeZQ78bUH1uGBYeI+cBDumhR1NdzdhFqH3EgpL6XhrWvR9QS2XJbmfU/qzH9vOh9T0nd54MuKqq8he42oaHh/jHDjrkAzpsLljqrr2ULfpVKKrubo8jziRKc9XQ0BgyFx7zEPejVyl07tnPG3jgOlGajrYB0o6GPupboceI28pHj2h9Grh1hKXTdpEMcG9yhm/LPRpULI9H4bFu9BhtIbPhMJ0szRBvNl/w+eq4qreQppjFwFZCtzp304yqs0Mhk+GN1SsWoOzOOL82Aj6DnLtZEjY09uHCwGRIpMruiEX1g7NVGrSHvG1gEWQBvOSYafSTdqHM/sAKXU46s8mtGftbL9lD3oxwbn9B0+GRdiOuUIh15pkHPotnBs04+SmRYj5KjfY+G3mzOS9CToMsXWbynokGey4E9koUzUwKt5eH1Dj/I4SkHiZl3f+EAnnpbyG0eLO86B7CAAAAAElFTkSuQmCC", "label": "Zscaler ZPA : Execute action", "short_name": "zscaler_zpa_action", "parameters": [{"format_type": "text", "required": true, "name": "account_name", "label": "Account name", "default_value": "", "help_string": "Specify the name of the account you want to use (username)", "type": "", "value": ""}, {"format_type": "dropdownlist", "required": true, "name": "action", "label": "Action", "default_value": "", "help_string": "Indicates which kind of action you want to perform", "possible_values": {"App Segment: Create": "create_app_segment", "App Segment: Update": "update_app_segment", "App Segment: Delete": "delete_app_segment", "Segment Group: Create": "create_segment_group"}, "type": "", "value": "create_segment_group"}], "code": "import json\nimport inspect\nimport sys\n\n# Import custom librairies\nfrom pyzscaler import ZPA\nimport restfly\n\n# encoding = utf-8\nOPT_ARGS = {\n    \"add_segment\": [\n        {\"name\": \"bypass_type\", \"annotation\": str, \"accepted_values\": [\"ALWAYS\",\"NEVER\",\"ON_NET\"]},\n        {\"name\": \"clientless_app_ids\", \"annotation\": list},\n        {\"name\": \"config_space\", \"annotation\": str, \"accepted_values\": [\"DEFAULT\",\"SIEM\"]},\n        {\"name\": \"default_idle_timeout\", \"annotation\": int},\n        {\"name\": \"default_max_age\", \"annotation\": int},\n        {\"name\": \"description\", \"annotation\": str},\n        {\"name\": \"double_encrypt\", \"annotation\": bool},\n        {\"name\": \"enabled\", \"annotation\": bool},\n        {\"name\": \"health_check_type\", \"annotation\": str, \"accepted_values\": [\"DEFAULT\",\"NONE\"]},\n        {\"name\": \"health_reporting\", \"annotation\": str, \"accepted_values\": [\"NONE\",\"ON_ACCESS\",\"CONTINUOUS\"]},\n        {\"name\": \"ip_anchored\", \"annotation\": bool},\n        {\"name\": \"is_cname_enabled\", \"annotation\": bool},\n        {\"name\": \"passive_health_enabled\", \"annotation\": bool}],\n    \"update_segment\": [\n        {\"name\": \"bypass_type\", \"annotation\": str, \"accepted_values\": [\"ALWAYS\",\"NEVER\",\"ON_NET\"]},\n        {\"name\": \"clientless_app_ids\", \"annotation\": list},\n        {\"name\": \"config_space\", \"annotation\": str, \"accepted_values\": [\"DEFAULT\",\"SIEM\"]},\n        {\"name\": \"default_idle_timeout\", \"annotation\": int},\n        {\"name\": \"default_max_age\", \"annotation\": int},\n        {\"name\": \"description\", \"annotation\": str},\n        {\"name\": \"domain_names\", \"annotation\": list},\n        {\"name\": \"double_encrypt\", \"annotation\": bool},\n        {\"name\": \"enabled\", \"annotation\": bool},\n        {\"name\": \"health_check_type\", \"annotation\": str, \"accepted_values\": [\"DEFAULT\",\"NONE\"]},\n        {\"name\": \"health_reporting\", \"annotation\": str, \"accepted_values\": [\"NONE\",\"ON_ACCESS\",\"CONTINUOUS\"]},\n        {\"name\": \"ip_anchored\", \"annotation\": bool},\n        {\"name\": \"is_cname_enabled\", \"annotation\": bool},\n        {\"name\": \"name\", \"annotation\": str},\n        {\"name\": \"segment_group_id\", \"annotation\": str},\n        {\"name\": \"server_group_ids\", \"annotation\": list},\n        {\"name\": \"tcp_ports\", \"annotation\": list},\n        {\"name\": \"server_group_ids\", \"annotation\": list},\n        {\"name\": \"udp_ports\", \"annotation\": bool}],\n    \"add_group\": [\n        {\"name\": \"application_ids\", \"annotation\": list},\n        {\"name\": \"config_space\", \"annotation\": str, \"accepted_values\": [\"DEFAULT\",\"SIEM\"]},\n        {\"name\": \"description\", \"annotation\": str},\n        {\"name\": \"policy_migrated\", \"annotation\": bool}]\n    }\n\n# Used to debug errors, get the good reference in the original python library\nREF_URL = \"https://github.com/mitchos/pyZscaler/blob/1.1.0/pyzscaler\"\nREF_TOOL = \"zpa\"\nREF_FILE = None\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the setup parameters and prints them to the log\n    zia_api_key = helper.get_global_setting(\"zia_api_key\")\n    helper.log_info(\"zia_api_key={}\".format(zia_api_key))\n    zia_cloud = helper.get_global_setting(\"zia_cloud\")\n    helper.log_info(\"zia_cloud={}\".format(zia_cloud))\n    zpa_customer_id = helper.get_global_setting(\"zpa_customer_id\")\n    helper.log_info(\"zpa_customer_id={}\".format(zpa_customer_id))\n\n    # The following example gets the alert action parameters and prints them to the log\n    account_name = helper.get_param(\"account_name\")\n    helper.log_info(\"account_name={}\".format(account_name))\n\n    action = helper.get_param(\"action\")\n    helper.log_info(\"action={}\".format(action))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \n    Use the following code to access to function params\n    func = < your function >\n    signature = inspect.signature(func)\n    for name, v in signature.parameters.items():\n        # Get the name of the parameter\n        helper.log_info(name)\n        # Get the type of the parameter\n        helper.log_info(v.annotation)\n        helper.log_info(\"Is string\" if v.annotation is str else \"Not a string\")\n        # Get the default value of the parameter\n        helper.log_info(v.default)\n        helper.log_info(\"Default is: \"+v.default if v.default is not inspect._empty else \"No default value\")\n    \"\"\"\n    # Define global variables\n    global REF_FILE\n    \n    # Get Zscaler information\n    client = helper.get_user_credential(helper.get_param(\"account_name\"))\n    if client is None:\n        helper.log_error(\"[ZPA-E-AUTH-ACCOUNT] Account can't be found. Did you configured the account under Configuration ? Did you mentionned the account name to use when raising this action ?\")\n        sys.exit(1)\n    helper.log_debug(\"[ZPA-D-AUTH] Authentication will be done using the account \\\"\"+helper.get_param(\"account_name\")+\"\\\"\")\n    customer_id = helper.get_global_setting(\"customer_id\")\n    if customer_id is None:\n        helper.log_error(\"[ZPA-E-AUTH-CUSTOMER-ID] Customer ID can't be found. Did you configured it under Configuration ?\")\n        sys.exit(1)\n    \n    # Get parameters\n    action = helper.get_param(\"action\")\n    \n    # Get events\n    events = helper.get_events()\n    \n    # Instanciate the ZPA object with given inputs\n    zpa = ZPA(client_id=client[\"username\"], client_secret=client[\"password\"], customer_id=customer_id)\n    \n    helper.log_debug(\"[ZPA-D-ZPA_OBJECT] Zscaler ZPA connection object is created successfully\")\n    try:\n        for event in events:\n            if action == \"create_app_segment\":\n                REF_FILE = \"app_segments.py#L61\"\n                helper.log_info(\"[ZPA-I-VALIDATE_NEW_APP_SEGMENT] Validating events for a new app segment\")\n                # Validate the function with current events\n                params = validate_function(helper, zpa.app_segments.add_segment, event)\n                # Execute the action to Zscaler\n                zpa.app_segments.add_segment(**params)\n                helper.log_info(\"[ZPA-I-ACTION_NEW_APP_SEGMENT] \ud83d\udfe2 Action was performed in Zscaler\")\n            elif action == \"update_app_segment\":\n                REF_FILE = \"app_segments.py#L150\"\n                helper.log_info(\"[ZPA-I-VALIDATE_UPDATE_APP_SEGMENT] Validating events for updating an existing app segment\")\n                # Validate the function with current events\n                params = validate_function(helper, zpa.app_segments.update_segment, event)\n                # Execute the action to Zscaler\n                zpa.app_segments.update_segment(**params)\n                helper.log_info(\"[ZPA-I-ACTION_UPDATE_APP_SEGMENT] \ud83d\udfe2 Action was performed in Zscaler\") \n            elif action == \"delete_app_segment\":\n                REF_FILE = \"app_segments.py#L44\"\n                helper.log_info(\"[ZPA-I-VALIDATE_DELETE_APP_SEGMENT] Validating events for a delete an existing app segment\")\n                # Validate the function with current events\n                params = validate_function(helper, zpa.app_segments.delete_segment, event)\n                # Execute the action to Zscaler\n                helper.log_info(\"[ZPA-I-PROCESS_DELETE_APP_SEGMENT] #1: Remove the application segment from the segment group to which it belongs\")\n                app = zpa.app_segments.get_segment(**params)\n                helper.log_debug(\"[ZPA-D-APP_SEGMENT_FOUND] Application segment was found for the given ID: \"+str(params))\n                # If there is no error on the previous command, it means that the app_segment really exist for the given id\n                segment = zpa.segment_groups.get_group(app[\"segment_group_id\"])\n                helper.log_debug(\"[ZPA-D-SEGMENT_GROUP_FOUND] Segment group was found for the given ID: \"+str(app[\"segment_group_id\"]))\n                # We remove the ID by getting all other IDs without it\n                app_id_remaining = [app_of_segment[\"id\"] for app_of_segment in segment[\"applications\"] if app_of_segment[\"id\"]!=app[\"id\"]]\n                # We update the segment group to remove the application segment\n                zpa.segment_groups.update_group(group_id=segment[\"id\"], application_ids=app_id_remaining)\n                helper.log_debug(\"[ZPA-D-SEGMENT_GROUP_UPDATED] Segment group was updated for the given ID: \"+str(app[\"segment_group_id\"]))\n                # Now we can delete the application segment itself\n                helper.log_info(\"[ZPA-I-PROCESS_DELETE_APP_SEGMENT] #2: Delete the application segment (id=\"+app[\"id\"]+\") itself\")\n                zpa.app_segments.delete_segment(segment_id=app[\"id\"])\n                helper.log_info(\"[ZPA-I-ACTION_DELETE_APP_SEGMENT] \ud83d\udfe2 Action was performed in Zscaler\") \n            elif action == \"create_segment_group\":\n                REF_FILE = \"segment_groups.py#L57\"\n                helper.log_info(\"[ZPA-I-VALIDATE_NEW_SEGMENT_GROUP] Validating events for a new segment group\")\n                # Validate the function with current events\n                params = validate_function(helper, zpa.segment_groups.add_group, event)\n                # Execute the action to Zscaler\n                zpa.segment_groups.add_group(**params)\n                helper.log_info(\"[ZPA-I-ACTION_NEW_SEGMENT_GROUP] \ud83d\udfe2 Action was performed in Zscaler\")\n            else:\n                helper.log_error(\"[ZPA-E-ACTION] Selected action is not supported by this custom alert action\")\n                sys.exit(10)\n    except restfly.errors.BadRequestError as e:\n        helper.log_error(\"[ZPA-E-BAD_REQUEST] \ud83d\udd34 Your request is not correct and was rejected by Zscaler: \"+str(e.msg.replace(\"\\\"\",\"'\")))\n        sys.exit(15)\n\n    return 0\n\n# This function is used to validate inputs for the given function\n# It's returning the dictionary with all parameters\ndef validate_function(helper, func, event):\n    \n    # Log on which event we are working on\n    helper.log_debug(\"[ZPA-D-FUNC] Validating following event for the function (\"+func.__name__+\"): \"+str(event))\n\n    # Prepare final dictionnary\n    params = {}\n    \n    helper.log_debug(\"[ZPA-D-VALID1] (#1) Validating parameters from function signature\")\n    # /1 Check all parameters from the function signature\n    signature = inspect.signature(func)\n    for sig_name, sig_values in signature.parameters.items():\n        # Remove false positives:\n        if sig_name not in [\"kwargs\"]:\n            param = process_param(helper, event, sig_name, sig_values.annotation, sig_values.default)\n            params[sig_name] = param\n    \n    helper.log_debug(\"[ZPA-D-VALID2] (#2) Validating parameters for optional arguments\")\n    # /2 Check all optional parameters for the given function\n    if func.__name__ in OPT_ARGS:\n        opt_args = OPT_ARGS[func.__name__]\n        for arg in opt_args:\n            param = process_param(helper, event, arg[\"name\"], arg[\"annotation\"], None)\n            if \"accepted_values\" in arg:\n                if param not in arg[\"accepted_values\"] and param is not None:\n                    helper.log_error(\"[ZPA-E-ACCEPTED_VALUES] Provided value (\"+str(param)+\") for the parameter (\"+arg[\"name\"]+\" is not accepted as it's expected only one of these values: \"+str(arg[\"accepted_values\"])+\". Please refer to the original python library code to verify which fields are expected: \"+REF_URL+\"/\"+REF_TOOL+\"/\"+REF_FILE)\n                    sys.exit(1)\n                elif param is not None:\n                    params[arg[\"name\"]] = param\n                else:\n                    helper.log_debug(\"[ZPA-D-OPTIONAL_ARG_NONE] Optional argument \"+arg[\"name\"]+\" will not be added in the payload as it's value is None\")\n            else:\n                if param is not None:\n                    params[arg[\"name\"]] = param\n        \n    helper.log_info(\"[ZPA-I-FINAL_PARAMS] Params built from event: \"+str(params))\n    return params\n\n\n# This function is used to get the final value and validate the type\ndef process_param(helper, event, sig_name, sig_annotation, sig_default):\n    \n    helper.log_debug(\"[ZPA-D-PROCESS_PARAMS_INPUT] Processing parameter with following inputs: event=\"+str(event)+\", sig_name=\"+str(sig_name)+\", sig_annotation=\"+str(sig_annotation)+\", sig_default=\"+str(sig_default))\n    \n    # Default is None\n    value = None\n    try:\n        value = event[sig_name]\n    except KeyError as e:\n        if sig_default is inspect._empty:\n            helper.log_error(\"[ZPA-E-FIELD_NOT_PRESENT] An expected field (\"+sig_name+\") is not present in the event (and no default value was found). Please refer to the original python library code to verify which fields are expected: \"+REF_URL+\"/\"+REF_TOOL+\"/\"+REF_FILE)\n            sys.exit(1)\n        else:\n            helper.log_debug(\"[ZPA-D-FIELD_NOT_PRESENT_DEFAULT] An expected field (\"+sig_name+\") is not present but a default value will be used: \"+str(value)+\". Please refer to the original python library code to verify which fields are expected: \"+REF_URL+\"/\"+REF_TOOL+\"/\"+REF_FILE)\n            value = sig_default\n    helper.log_debug(\"[ZPA-D-TYPE_PROCESSING] Type for \"+sig_name+\" need to be \"+str(sig_annotation)+\", processing it...\")\n    # Avoid adding none values\n    if value is not None:\n        # Process data with the expected type\n        if sig_annotation is int:\n            value = int(value)\n        elif sig_annotation is str:\n            value = str(value)\n        elif sig_annotation is list:\n            value = value.replace(\", \",\",\").split(\",\")\n        elif sig_annotation is bool:\n            if value in [\"0\",\"false\"]:\n                value = False\n            else:\n                value = True\n        elif sig_annotation is inspect._empty:\n            helper.log_error(\"[ZPA-E-EMPTY-TYPE] This error should come from the pyzscaler library on which a field has no type defined. Please check this information for the field '\"+str(sig_name)+\"'\")\n            sys.exit(1)\n        else:\n            helper.log_error(\"[ZPA-E-UNSUPPORTED_TYPE] Unsupported type for parameter: \"+str(sig_annotation))\n            sys.exit(1)\n    return value", "uuid": "768cecab43ef406baed4c6a95c867845"}]}, "basic_builder": {"appname": "TA-zscaler-api", "friendly_name": "Zscaler API", "version": "1.1.1", "author": "Alexandre Demeyer", "description": "This TA is used to interact with the Zscaler API (ZPA only for the moment) using Splunk", "theme": "#009AD8", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABG5JREFUWEfdl2tsk1UYx/9v7yu7dXUXKtYxJTqVsEA2VvkiEbMPXIRwMaRIYICJ7ItAwiUKErZPJPoFoolD1ERGcGCQcclQFsJQN8Z0DOK4uCtb27Vb2djWla3ta05L3/Z9+7bvacsH4vm09TzPc37v8/zPc85hWJZl8RwN5n8LNDbl8+c5TSVLKt8JZ2jSw6KyaQg/doyJAug1cny9JAelM1PiAkwI6NjtURxqGqZaaIlRi+NleVS2xChuoMU/PUTn6HTMBVIUDFbPSUXVomzIGGBi2ocZSrpSxgW05bINv/a6osKQxds35iM9CR1FBbKMe2C+ZEXnSCAbDIBY/WF/qR7b5mZQlyaaoShQRcMg6jonqIM3rJ2FVzNVeDzlg3PSiwy1DDqNnNo/3DACaHO9FVf6JqmCMQxwZ2M+DvwxhDMPxjmfGUoGP68woDBLTRUnKlDroBurzlniDhLusK8kCx/Py+TF8PhYjE/7MOVlkaaSg4ieqmTG6q6EYVRyBv+Wz+b8id5uWN1Ye178A3fOz8QnC7Ii1uNK9k37CKqanQkB6TQy3Pown/Nts7vx/jkLpE5JhYxB15bQR/D6UP6xLvgSOGbnZatRt/JFDmb9BSt+t9BpkDhpFAzubw5BcRlKpFwFGUpcXfcSB7PqlwG02p/4/yc6+XShHkrSnAB4WRYH/xz260g4Dpr0KH8r0DL8QDdsbqypi0/MajmDB2GaOXn3MfY2DqGiKBO7iyO1EYQYdHlQfKIvAqpvW0EIaG+jAzV3xQ/JaKIKBgjO77xqx5fv5FBpcNrH4pVvu3m2PKDVdRa02NxUwYjRnmIdKop01PZihrX3xrDrmoObajEbkatVBEq2/OwAbjkCtZcaRBG9T9MrZRtrnvSlN77v4Ux+KMvDYqM2ALTuvAVNVroM3TQbkaNVJMPi97VNeFBSE9LS6eUGlORpAkBE/cfvjEouIhSymMORv0fwyO0FuT9qFQx2LNBxOy3c/r3T/bj3aIr7qXtrAeTM0102MO6B6WSk8oULXlkzC3N0qgiO2vtj2H3NAZEdzdlWLXoB619P88MdbRvB4RZ+E+aJmnjR9CHhzrK7vCip6U2ooYZ/1UdzM/BZqT607clfZWf60eEMpVCYhlytHC3ml7mfG/tdMF+ySZZZyiBVKcM/m0LHDtepybFBjo9oI1hjMl/dPorKZro7dSwgk0GDU0sNPBPefaiyaRjVt8XFHSzXb30ulNcnl5naZQYU5ahBNolwRFzQVpwdQJugJ5HjqGdrgf+yXhjWO6TKITafnSJH64ZQ6SWBiMG+6w6cCHtvGdMVuP6BkUr4UpDCjUEFFDT64qYTzTY3vno3Fx3OJzBfTK5Uh97WY9ObsR8CcT2DXvuuG+TFmsgwzdTg1DK+gMXixAVEAtT3TGB7g93/JiJvPxcFIHlSL52dSvUdcQMJo/5ld4PcEsUyt6EwHZ+b9KK7KRpd0kDhgcltkLwwtJTP5mdSMqq8J2H0TDOUBAfn+twB/QcfZPCk0WCTIgAAAABJRU5ErkJggg==", "visible": true, "tab_version": "4.1.0", "tab_build_no": "0", "build_no": 3}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "zscaler:api:zia", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "zscaler_zia_configurations", "title": "Zscaler ZIA Configurations", "description": "This input is used to recover periodically some data regarding the current Zscaler ZIA configuration in a dedicated sourcetype", "type": "customized", "parameters": [{"name": "client_account", "label": "Client Account", "help_string": "Enter your Zscaler Client account (configured under Account)", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "items", "label": "Items", "help_string": "Select which configuration you want to recover", "required": true, "possible_values": [{"value": "admin_users", "label": "Admin users"}, {"label": "Admin roles", "value": "admin_roles"}, {"label": "DLP", "value": "dlp"}, {"label": "Firewall - Rules", "value": "firewall_rules"}, {"label": "Firewall - IP Source Groups", "value": "firewall_ip_source_groups"}, {"label": "Firewall - IP Destination Groups", "value": "firewall_ip_destination_groups"}, {"label": "Firewall - Network App Groups", "value": "network_app_groups"}, {"label": "Firewall - Network Apps", "value": "network_apps"}, {"label": "Firewall - Network SVC Groups", "value": "network_svc_groups"}, {"label": "Firewall - Network Services", "value": "network_services"}, {"label": "Locations", "value": "locations"}, {"label": "Sandbox", "value": "sandbox"}, {"label": "Security Policy - Whitelist", "value": "security_whitelist"}, {"label": "Security Policy - Blacklist", "value": "security_blacklist"}, {"label": "SSL Inspection", "value": "ssl_inspection"}, {"label": "GRE Tunnels: Configured", "value": "gre_tunnels"}, {"label": "GRE Tunnels: Available Ranges", "value": "gre_ranges"}, {"label": "Static IPs", "value": "static_ips"}, {"label": "Virtual IP Adresses: Available", "value": "vips"}, {"label": "VPN Credentials", "value": "vpn_credentials"}, {"label": "URL Categories", "value": "url_categories"}, {"label": "URL Filtering Policies", "value": "url_filtering_rules"}, {"label": "Users", "value": "users"}, {"label": "Users: Department", "value": "users_department"}, {"label": "Users: Groups", "value": "users_groups"}, {"label": "Zscaler Public Service Edge", "value": "public_se"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": "", "type": "multi_dropdownlist", "value": ["public_se"]}], "data_inputs_options": [{"type": "customized_var", "name": "client_account", "title": "Client Account", "description": "Enter your Zscaler Client account (configured under Account)", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "items", "title": "Items", "description": "Select which configuration you want to recover", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "admin_users", "label": "Admin users"}, {"label": "Admin roles", "value": "admin_roles"}, {"label": "DLP", "value": "dlp"}, {"label": "Firewall - Rules", "value": "firewall_rules"}, {"label": "Firewall - IP Source Groups", "value": "firewall_ip_source_groups"}, {"label": "Firewall - IP Destination Groups", "value": "firewall_ip_destination_groups"}, {"label": "Firewall - Network App Groups", "value": "network_app_groups"}, {"label": "Firewall - Network Apps", "value": "network_apps"}, {"label": "Firewall - Network SVC Groups", "value": "network_svc_groups"}, {"label": "Firewall - Network Services", "value": "network_services"}, {"label": "Locations", "value": "locations"}, {"label": "Sandbox", "value": "sandbox"}, {"label": "Security Policy - Whitelist", "value": "security_whitelist"}, {"label": "Security Policy - Blacklist", "value": "security_blacklist"}, {"label": "SSL Inspection", "value": "ssl_inspection"}, {"label": "GRE Tunnels: Configured", "value": "gre_tunnels"}, {"label": "GRE Tunnels: Available Ranges", "value": "gre_ranges"}, {"label": "Static IPs", "value": "static_ips"}, {"label": "Virtual IP Adresses: Available", "value": "vips"}, {"label": "VPN Credentials", "value": "vpn_credentials"}, {"label": "URL Categories", "value": "url_categories"}, {"label": "URL Filtering Policies", "value": "url_filtering_rules"}, {"label": "Users", "value": "users"}, {"label": "Users: Department", "value": "users_department"}, {"label": "Users: Groups", "value": "users_groups"}, {"label": "Zscaler Public Service Edge", "value": "public_se"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": ""}], "customized_options": [{"name": "client_account", "value": "account0"}, {"name": "items", "value": ["public_se"]}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport hashlib\n\n# Import custom librairies\nfrom pyzscaler import ZIA\nimport restfly\n\nAPI_KEY_HASHED = None\nMAXIMUM_URL_PER_CATEGORY = 200\nMAXIMUM_DEST_IP_PER_RULE = 300\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # client_account = definition.parameters.get('client_account', None)\n    # items = definition.parameters.get('items', None)\n    if(definition.parameters.get('client_account', None) is None):\n        helper.log_error(\"[ZIA-E-NO_CLIENT_ACCOUNT] No client account was provided\")\n        sys.exit(1)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_client_account = helper.get_arg('client_account')\n    opt_items = helper.get_arg('items')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_client_account = helper.get_arg('client_account', stanza_name)\n    opt_items = helper.get_arg('items', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_customer_id = helper.get_global_setting(\"customer_id\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n    helper.log_info(\"[ZIA-I-START-COLLECT] Start to recover configuration events from Zscaler ZIA\")\n    \n    global API_KEY_HASHED\n    \n    # Get information about the Splunk input\n    opt_items = helper.get_arg('items')\n    \n    # Get credentials for Zscaler\n    client = helper.get_arg('client_account')\n    api_key = helper.get_global_setting(\"zia_api_key\")\n    if api_key is None or api_key == \"\":\n        helper.log_error(\"[ZIA-E-API_KEY_NULL] No API key was provided, check your configuration\")\n        sys.exit(1)\n        \n    cloud = helper.get_global_setting(\"zia_cloud\")\n    if cloud is None or cloud == \"\":\n        helper.log_error(\"[ZIA-E-CLOUD_NULL] No Cloud information was provided, check your configuration\")\n        sys.exit(1)\n        \n    # Hash the key\n    API_KEY_HASHED = hashlib.sha256(api_key.encode()).hexdigest()[:8]\n\n    ITEMS_MAP = {\n        \"admin_users\": {\"key\": \"admin_and_role_management\", \"func\": \"list_users\"},\n        \"admin_roles\": {\"key\": \"admin_and_role_management\", \"func\": \"list_roles\"},\n        \"dlp\": {\"key\": \"dlp\", \"func\": \"list_dicts\"},\n        \"network_app_groups\": {\"key\": \"firewall\", \"func\": \"list_network_app_groups\"},\n        \"network_apps\": {\"key\": \"firewall\", \"func\": \"list_network_apps\"},\n        \"network_svc_groups\": {\"key\": \"firewall\", \"func\": \"list_network_svc_groups\"},\n        \"network_services\": {\"key\": \"firewall\", \"func\": \"list_network_services\"},\n        \"gre_tunnels\": {\"key\": \"traffic\", \"func\": \"list_gre_tunnels\"},\n        \"gre_ranges\": {\"key\": \"traffic\", \"func\": \"list_gre_ranges\"},\n        \"static_ips\": {\"key\": \"traffic\", \"func\": \"list_static_ips\"},\n        \"vips\": {\"key\": \"traffic\", \"func\": \"list_vips\"},\n        \"vpn_credentials\": {\"key\": \"traffic\", \"func\": \"list_vpn_credentials\"},\n        \"url_filtering_rules\": {\"key\": \"url_filters\", \"func\": \"list_rules\"},\n        \"users\": {\"key\": \"users\", \"func\": \"list_users\"},\n        \"users_departments\": {\"key\": \"users\", \"func\": \"list_departments\"},\n        \"users_groups\": {\"key\": \"users\", \"func\": \"list_groups\"}\n    }\n    \n    # Instanciate the ZPA object with given inputs\n    try:\n        zia = ZIA(api_key=api_key, cloud=cloud, username=client[\"username\"], password=client[\"password\"])\n    except restfly.errors.BadRequestError as e:\n        helper.log_error(\"[ZIA-E-BAD_CREDENTIALS] \ud83d\udd34 Your request is not correct and was rejected by Zscaler: \"+str(e.msg.replace(\"\\\"\",\"'\")))\n        sys.exit(10)\n    \n    helper.log_debug(\"[ZIA-D-ZIA_OBJECT] Zscaler ZIA connection object is created successfully\")\n    try:\n        # Get items (simple methods)\n        for item in opt_items:\n            if item in ITEMS_MAP:\n                key = ITEMS_MAP[item][\"key\"]\n                function = ITEMS_MAP[item][\"func\"]\n                all_data = getattr(getattr(zia,key),function)()\n                for data in all_data:\n                    write_to_splunk(helper, ew, item, data)\n                log(helper, item, all_data)\n            \n        # Get URL categories if specified (more complex, as we can have categories with a lot of URLs defined)\n        if \"url_categories\" in opt_items:\n            for data in zia.url_categories.list_categories():\n                urls_lists = [data[\"urls\"][i:i+MAXIMUM_URL_PER_CATEGORY] for i in range(0, len(data[\"urls\"]), MAXIMUM_URL_PER_CATEGORY)]\n                total_urls = data[\"custom_urls_count\"]\n                page = 0\n                while page < len(urls_lists):\n                    data[\"urls\"] = urls_lists[page]\n                    data[\"custom_urls_count\"] = len(data[\"urls\"])\n                    data[\"custom_urls_total\"] = total_urls\n                    write_to_splunk(helper, ew, \"url_category:\"+str(data[\"id\"]), data)\n                    log(helper, \"url_category:\"+str(data[\"id\"]), data)\n                    page += 1\n                    \n        # Get Firewall rules if specified (more complex, as we can have a lot of IPs defined in one rule)\n        if \"firewall_rules\" in opt_items:\n            for data in zia.firewall.list_rules():\n                if \"dest_addresses\" in data:\n                    dest_addresses_lists = [data[\"dest_addresses\"][i:i+MAXIMUM_DEST_IP_PER_RULE] for i in range(0, len(data[\"dest_addresses\"]), MAXIMUM_DEST_IP_PER_RULE)]\n                    total_dest_addr = len(data[\"dest_addresses\"])\n                    page = 0\n                    while page < len(dest_addresses_lists):\n                        data[\"dest_addresses\"] = dest_addresses_lists[page]\n                        data[\"dest_addresses_count\"] = len(data[\"dest_addresses\"])\n                        data[\"dest_addresses_total\"] = total_dest_addr\n                        write_to_splunk(helper, ew, \"firewall_rule:\"+str(data[\"id\"]), data)\n                        log(helper, \"firewall_rule:\"+str(data[\"id\"]), data)\n                        page += 1\n                else:\n                    write_to_splunk(helper, ew, \"firewall_rule:\"+str(data[\"id\"]), data)\n                    log(helper, \"firewall_rule:\"+str(data[\"id\"]), data)\n                    \n        # Get Firewall IP Source Groups if specified (more complex, as we can have a lot of IPs defined in one group)\n        if \"firewall_ip_source_groups\" in opt_items:\n            for data in zia.firewall.list_ip_source_groups():\n                addresses_lists = [data[\"ip_addresses\"][i:i+MAXIMUM_DEST_IP_PER_RULE] for i in range(0, len(data[\"ip_addresses\"]), MAXIMUM_DEST_IP_PER_RULE)]\n                total_dest_addr = len(data[\"ip_addresses\"])\n                page = 0\n                while page < len(addresses_lists):\n                    data[\"ip_addresses\"] = addresses_lists[page]\n                    data[\"ip_addresses_count\"] = len(data[\"ip_addresses\"])\n                    data[\"ip_addresses_total\"] = total_dest_addr\n                    write_to_splunk(helper, ew, \"firewall_ip_source_group:\"+str(data[\"id\"]), data)\n                    log(helper, \"firewall_ip_source_group:\"+str(data[\"id\"]), data)\n                    page += 1\n\n        # Get Firewall IP Destination Groups if specified (more complex, as we can have a lot of IPs defined in one group)\n        if \"firewall_ip_destination_groups\" in opt_items:\n            for data in zia.firewall.list_ip_destination_groups():\n                addresses_lists = [data[\"addresses\"][i:i+MAXIMUM_DEST_IP_PER_RULE] for i in range(0, len(data[\"addresses\"]), MAXIMUM_DEST_IP_PER_RULE)]\n                total_dest_addr = len(data[\"addresses\"])\n                page = 0\n                while page < len(addresses_lists):\n                    data[\"addresses\"] = addresses_lists[page]\n                    data[\"addresses_count\"] = len(data[\"addresses\"])\n                    data[\"addresses_total\"] = total_dest_addr\n                    write_to_splunk(helper, ew, \"firewall_ip_destination_group:\"+str(data[\"id\"]), data)\n                    log(helper, \"firewall_ip_destination_group:\"+str(data[\"id\"]), data)\n                    page += 1\n                    \n        # Get Locations if specified (more complex, as we can have sub locations)\n        if \"locations\" in opt_items:\n            for data in zia.locations.list_locations_lite(include_sub_locations=True):\n                write_to_splunk(helper, ew, \"locations\", data)\n                log(helper, \"locations\", data)\n\n        # Get Security policy blacklist if specified (more complex)\n        if \"sandbox\" in opt_items:\n            sandbox_quota = zia.sandbox.get_quota()\n            write_to_splunk(helper, ew, \"sandbox:quota\", sandbox_quota)\n            log(helper, \"sandbox:quota\", sandbox_quota)\n        \n        # Get Security policy blacklist if specified (more complex)\n        if \"security_blacklist\" in opt_items:\n            blacklist = zia.security.get_blacklist()\n            write_to_splunk(helper, ew, \"security:blacklist\", blacklist)\n            log(helper, \"sandbox:security:blacklist\", blacklist)\n        \n        # Get Security policy whitelist if specified (more complex)\n        if \"security_whitelist\" in opt_items:\n            whitelist = zia.security.get_whitelist()\n            write_to_splunk(helper, ew, \"security:whitelist\", whitelist)\n            log(helper, \"sandbox:security:whitelist\", whitelist)\n        \n        # Get SSL Inspection if specified (more complex)\n        if \"ssl_inspection\" in opt_items:\n            data = zia.ssl.get_intermediate_ca()\n            write_to_splunk(helper, ew, \"ssl_inspection\", data)\n            log(helper, \"ssl_inspection\", data)\n\n        # Get Zscaler Public information if specified (more complex)\n        if \"public_se\" in opt_items:\n            data = zia.vips.list_public_se(cloud=cloud)\n            final_data = None\n            for continent in data.keys():\n                final_continent = continent.split(\" :\")[1].replace(\" \",\"\")\n                for city in data[continent].keys():\n                    final_city = city.split(\" :\")[1]\n                    final_data = {\"continent\": final_continent, \"city\": final_city, \"data\": data[continent][city]}\n                    write_to_splunk(helper, ew, \"public_service_edge\", final_data)\n                    log(helper, \"public_service_edge\", final_data)\n            data = zia.vips.list_ca(cloud=cloud)\n            write_to_splunk(helper, ew, \"public_central_authority\", {\"ca\": data})\n            log(helper, \"public_central_authority\", data)\n            data = zia.vips.list_pac(cloud=cloud)\n            write_to_splunk(helper, ew, \"public_proxy_auto_configuration\", {\"pac\": data})\n            log(helper, \"public_proxy_auto_configuration\", data)\n            \n                    \n    except restfly.errors.BadRequestError as e:\n        helper.log_error(\"[ZIA-E-BAD_REQUEST] \ud83d\udd34 Your request is not correct and was rejected by Zscaler: \"+str(e.msg.replace(\"\\\"\",\"'\")))\n        sys.exit(15)\n    except restfly.errors.ForbiddenError as e:\n        helper.log_error(\"[ZIA-E-FORBIDDEN_REQUEST] \ud83d\udd34 Your request is forbidden and was rejected by Zscaler: \"+str(e.msg.replace(\"\\\"\",\"'\")))\n        sys.exit(16)\n    \n    helper.log_info(\"[ZIA-I-END-COLLECT] \ud83d\udfe2 Events from Zscaler ZIA (\"+str(opt_items)+\") are recovered\")\n\n\n# This function is writing events in Splunk\ndef write_to_splunk(helper, ew, item, data):\n    event = helper.new_event(source=\"zia:\"+API_KEY_HASHED+\":\"+item, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(data))\n    ew.write_event(event)\n    \n    \n# This function is logging information in the search.log\ndef log(helper, item, all_data):\n    if len(all_data)>0 and all_data!=[]:\n        helper.log_debug(\"[ZIA-D-EVENTS_WRITTEN] Events are written for \"+item+\" to the index \"+helper.get_output_index()+\": \"+str(all_data))\n    else:\n        helper.log_debug(\"[ZIA-D-NO_EVENT_FOUND] No event found for \"+item)\n", "uuid": "ee329129407342fc90e2c66be9edcb7c", "sample_count": "297"}, {"index": "default", "sourcetype": "zscaler:api:zpa", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "zscaler_zpa_configurations", "title": "Zscaler ZPA Configurations", "description": "This input is used to recover periodically some data regarding the current Zscaler ZPA configuration in a dedicated sourcetype", "type": "customized", "parameters": [{"name": "client_account", "label": "Client Account", "help_string": "Enter your Zscaler Client account (configured under Account)", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account1"}, {"name": "items", "label": "Items", "help_string": "Select which configuration you want to recover", "required": true, "possible_values": [{"value": "app_segments", "label": "App Segments"}, {"value": "certificates", "label": "Browser Access"}, {"value": "cloud_connector_groups", "label": "Cloud Connector Groups"}, {"label": "Connector Groups", "value": "connector_groups"}, {"label": "Connectors", "value": "connectors"}, {"label": "IDP", "value": "idp"}, {"label": "Machine Groups", "value": "machine_groups"}, {"label": "Policies", "value": "policies"}, {"label": "Posture Profiles", "value": "posture_profiles"}, {"label": "Provisioning", "value": "provisioning"}, {"label": "SAML Attributes", "value": "saml_attributes"}, {"label": "SCIM Attributes", "value": "scim_attributes"}, {"label": "SCIM Groups", "value": "scim_groups"}, {"label": "Segment Groups", "value": "segment_groups"}, {"label": "Server Groups", "value": "server_groups"}, {"label": "Servers", "value": "servers"}, {"label": "Service Edges", "value": "service_edges"}, {"label": "Trusted Networks", "value": "trusted_networks"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": "", "type": "multi_dropdownlist", "value": ["segment_groups"]}], "data_inputs_options": [{"type": "customized_var", "name": "client_account", "title": "Client Account", "description": "Enter your Zscaler Client account (configured under Account)", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "items", "title": "Items", "description": "Select which configuration you want to recover", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "app_segments", "label": "App Segments"}, {"value": "certificates", "label": "Browser Access"}, {"value": "cloud_connector_groups", "label": "Cloud Connector Groups"}, {"label": "Connector Groups", "value": "connector_groups"}, {"label": "Connectors", "value": "connectors"}, {"label": "IDP", "value": "idp"}, {"label": "Machine Groups", "value": "machine_groups"}, {"label": "Policies", "value": "policies"}, {"label": "Posture Profiles", "value": "posture_profiles"}, {"label": "Provisioning", "value": "provisioning"}, {"label": "SAML Attributes", "value": "saml_attributes"}, {"label": "SCIM Attributes", "value": "scim_attributes"}, {"label": "SCIM Groups", "value": "scim_groups"}, {"label": "Segment Groups", "value": "segment_groups"}, {"label": "Server Groups", "value": "server_groups"}, {"label": "Servers", "value": "servers"}, {"label": "Service Edges", "value": "service_edges"}, {"label": "Trusted Networks", "value": "trusted_networks"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\nimport json\nimport hashlib\n\n# Import custom librairies\nfrom pyzscaler import ZPA\nimport restfly\n\nCUSTOMER_ID_HASHED = None\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # client_account = definition.parameters.get('client_account', None)\n    if(definition.parameters.get('client_account', None) is None):\n        helper.log_error(\"[ZPA-E-NO_CLIENT_ACCOUNT] No client account was provided\")\n        sys.exit(1)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_client_account = helper.get_arg('client_account')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_client_account = helper.get_arg('client_account', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_customer_id = helper.get_global_setting(\"customer_id\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n    helper.log_info(\"[ZPA-I-START-COLLECT] Start to recover events from Zscaler ZPA\")\n    \n    global CUSTOMER_ID_HASHED\n    \n    # Get information about the Splunk input\n    opt_items = helper.get_arg('items')\n    \n    # Get credentials for Zscaler\n    client = helper.get_arg('client_account')\n    customer_id = helper.get_global_setting(\"zpa_customer_id\")\n    if customer_id is None or customer_id == \"\":\n        helper.log_error(\"[ZPA-E-CUSTOMER_ID_NULL] No Customer ID was provided, check your configuration\")\n        sys.exit(1)\n        \n    # Hash the Customer ID\n    CUSTOMER_ID_HASHED = hashlib.sha256(customer_id.encode()).hexdigest()[:8]\n    \n    ITEMS_MAP = {\n        \"app_segments\": \"list_segments\",\n        \"certificates\": \"list_browser_access\",\n        \"cloud_connector_groups\": \"list_groups\",\n        \"connector_groups\": \"list_groups\",\n        \"connectors\": \"list_connectors\",\n        \"idp\": \"list_idps\",\n        \"machine_groups\": \"list_groups\",\n        \"posture_profiles\": \"list_profiles\",\n        \"saml_attributes\": \"list_attributes\",\n        \"server_groups\": \"list_groups\",\n        \"servers\": \"list_servers\",\n        \"trusted_networks\": \"list_networks\"\n    }\n    \n    # Instanciate the ZPA object with given inputs\n    try:\n        zpa = ZPA(client_id=client[\"username\"], client_secret=client[\"password\"], customer_id=customer_id)\n    except restfly.errors.UnauthorizedError as e:\n        helper.log_error(\"[ZPA-E-BAD_CREDENTIALS] \ud83d\udd34 Your request is not correct and was rejected by Zscaler: \"+str(e.msg.replace(\"\\\"\",\"'\")))\n        sys.exit(10)\n    helper.log_debug(\"[ZPA-D-ZPA_OBJECT] Zscaler ZPA connection object is created successfully\")\n    \n    try:\n        # Get items (simple methods)\n        for item in opt_items:\n            if item in ITEMS_MAP:\n                function = ITEMS_MAP[item]\n                all_data = getattr(getattr(zpa,item),function)()\n                for data in all_data:\n                    write_to_splunk(helper, ew, item, data)\n                log(helper, item, all_data)\n        \n        # Get segment groups if specified (more complex, as we can have big segment groups)\n        if \"segment_groups\" in opt_items:\n            for data in zpa.segment_groups.list_groups():\n                applications = data[\"applications\"]\n                del data[\"applications\"]\n                for app in applications:\n                    data[\"application\"] = app\n                    write_to_splunk(helper, ew, \"segment_groups:\"+str(data[\"id\"]), data)\n                    log(helper, \"segment_groups\", data)\n                    \n        \n        # Get policies if specified (more complex)\n        if \"policies\" in opt_items:\n            for policy_name in [\"access\",\"timeout\",\"client_forwarding\",\"siem\"]:\n                policy = zpa.policies.get_policy(policy_name)\n                write_to_splunk(helper, ew, \"policies\", policy)\n                log(helper, \"policies\", policy)\n                if policy_name != \"siem\":\n                    all_data = zpa.policies.list_rules(policy_name)\n                    for rule in all_data:\n                        write_to_splunk(helper, ew, \"policies:rules\", rule)\n                    log(helper, \"policies:rules\", all_data)\n                    \n        \n        # Get provisioning if specified (more complex)\n        if \"provisioning\" in opt_items:\n            for key in [\"connector\",\"service_edge\"]:\n                provisioning = zpa.provisioning.list_provisioning_keys(key)\n                if provisioning != []:\n                    write_to_splunk(helper, ew, \"provisioning\", provisioning)\n                    log(helper, \"provisioning\", provisioning)\n                    \n                    \n        # Get SCIM attributes if specified (more complex)\n        if \"scim_attributes\" in opt_items:\n            for idp in zpa.idp.list_idps():\n                list_attributes = zpa.scim_attributes.list_attributes_by_idp(idp[\"id\"])\n                if list_attributes != []:\n                    write_to_splunk(helper, ew, \"scim_attributes\", list_attributes)\n                    log(helper, \"scim_attributes\", list_attributes)\n    \n    \n        # Get SCIM groups if specified (more complex)\n        if \"scim_groups\" in opt_items:\n            for idp in zpa.idp.list_idps():\n                list_groups = zpa.scim_groups.list_groups(idp[\"id\"])\n                if list_groups != []:\n                    write_to_splunk(helper, ew, \"scim_groups\", list_groups)\n                    log(helper, \"scim_groups\", list_groups)\n    \n    \n        # Get service edges if specified (more complex)\n        if \"service_edges\" in opt_items:\n            all_data = zpa.service_edges.list_service_edges()\n            for service_edges in all_data:\n                write_to_splunk(helper, ew, \"service_edges\", service_edges)\n            log(helper, \"service_edges\", list_groups)\n            all_data = zpa.service_edges.list_service_edge_groups()\n            for service_edge_groups in all_data:\n                write_to_splunk(helper, ew, \"service_edge_groups\", service_edge_groups)\n            log(helper, \"service_edge_groups\", list_groups)\n    except restfly.errors.BadRequestError as e:\n        helper.log_error(\"[ZPA-E-BAD_REQUEST] \ud83d\udd34 Your request is not correct and was rejected by Zscaler: \"+str(e.msg.replace(\"\\\"\",\"'\")))\n        sys.exit(15)\n        \n    helper.log_info(\"[ZPA-I-END-COLLECT] \ud83d\udfe2 Events from Zscaler ZPA are recovered\")\n\n\n\n# This function is writing events in Splunk\ndef write_to_splunk(helper, ew, item, data):\n    # Add which Zscaler instance\n    event = helper.new_event(source=\"zpa:\"+CUSTOMER_ID_HASHED+\":\"+item, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=json.dumps(data))\n    ew.write_event(event)\n    \n    \n# This function is logging information in the search.log\ndef log(helper, item, all_data):\n    if len(all_data)>0 and all_data!=[]:\n        helper.log_debug(\"[ZPA-D-EVENTS_WRITTEN] Events are written for \"+item+\" to the index \"+helper.get_output_index()+\": \"+str(all_data))\n    else:\n        helper.log_debug(\"[ZPA-D-NO_EVENT_FOUND] No event found for \"+item)\n        ", "customized_options": [{"name": "client_account", "value": "account0"}, {"name": "items", "value": ["segment_groups"]}], "uuid": "7a999f4f8569482bbc7d7d84c016dd0b", "sample_count": "0"}]}, "field_extraction_builder": {"zscaler:api:zpa": {"data_format": "unstructured_data"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "INFO"}, "credential_settings": [], "customized_settings": [{"required": false, "name": "zia_api_key", "label": "(ZIA) API key", "default_value": "", "placeholder": "", "help_string": "Enter your Zscaler API key", "type": "text", "format_type": "text", "value": ""}, {"required": false, "name": "zia_cloud", "label": "(ZIA) Cloud", "default_value": "", "placeholder": "", "help_string": "Enter your Zscaler Cloud (zscaler, zscalerone, zscalertwo, zscalerthree, zscloud, zscalerbeta or zscalergov)", "type": "text", "format_type": "text", "value": ""}, {"required": false, "name": "zpa_customer_id", "label": "(ZPA) Customer ID", "default_value": "", "placeholder": "", "help_string": "Enter your Zscaler Customer ID", "type": "text", "format_type": "text", "value": ""}]}}, "sourcetype_builder": {"zscaler:api:zpa": {"metadata": {"event_count": 0, "data_input_name": "zscaler_zpa_configurations", "extractions_count": 0, "cims_count": 0}}, "zscaler:api:zia": {"metadata": {"event_count": 0, "data_input_name": "zscaler_zia_configurations", "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1646920923_1", "progress": 1.0}}